EventId,EventTemplate
E1,"printFreezingDisplayLogsopening app wtoken = <*>, allDrawn= <*>, startingDisplayed = <*>, startingMoved = <*>, isRelaunching = <*>"
E2,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>"
E3,"ready=true,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*>"
E4,Skipping <*> -- going to hide
E5,visible is <*>
E6,<*> is <*>
E7,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>"
E8,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>"
E9,updateDimmedActivatedHideSensitive overlap:<*>
E10,getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output
E11,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=<*>, dockedStackBounds=<*>"
E12,cancelAutohide
E13,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>"
E14,Destroying surface Surface(name=SurfaceView - com.tencent.qt.qtl/com.tencent.video.player.activity.PlayerActivity) called by com.android.server.wm.WindowStateAnimator.destroyDeferredSurfaceLocked:<*> com.android.server.wm.WindowManagerService.performDeferredDestroyWindow:<*> com.android.server.wm.Session.performDeferredDestroy:<*> android.view.IWindowSession$Stub.onTransact:<*> com.android.server.wm.Session.onTransact:<*> android.os.Binder.execTransact:<*> <bottom of call stack> <bottom of call stack>
E15,Destroying surface Surface(name=<*>) called by <*>
E16,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>"
E17,Screen frozen for +<*> due to <*>
E18,startAnimation <*>
E19,remove(<*>) changed bounds; rebatching
E20,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED"
E21,"Application requested orientation <*>, got rotation <*> which has compatible metrics"
E22,shouldBlockLocation running ...
E23,shouldBlockLocation ret:<*>
E24,"Releasing suspend blocker ""<*>""."
E25,HBM brightnessIn = <*>
E26,HBM brightnessOut = <*>
E27,"Animating brightness: target=<*>, rate=<*>"
E28,suspendAutohide
E29,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>
E30,"interceptKeyBeforeQueueing: key <*>, result : <*>"
E31,resumeSuspendedAutohide
E32,querySoundEffectsEnabled...
E33,"Acquiring suspend blocker ""<*>""."
E34,Bad activity token: <*>
E35,java.lang.ClassCastException: <*> cannot be cast to <*>
E36,"onTouchEvent::<*>, x=<*>, y=<*>"
E37,schedulePeek
E38,getRingtonePlayer...
E39,disable: < expand <*> alerts <*> back home recent clock navigationbar search quick_settings >
E40,"updateLightsLocked, mInCall = <*>, mScreenOn = <*>, ledNotification == <*>"
E41,"updateLightsLocked,turn off <*>"
E42,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>"
E43,"state.clipTopAmount:<*>, i:<*>"
E44,onExpandingStarted
E45,onTrackingStarted
E46,cancelPeek: <*>
E47,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>"
E48,onTrackingStopped: <*>
E49,onExpandingFinished
E50,Sending non-protected broadcast <*> from <*>
E51,logNotificationVisibilityChanges <*> start
E52,onNotificationVisibilityChanged called
E53,logNotificationVisibilityChanges <*> over
E54,registerCallback not in <*>.
E55,<*>: Must execute in UI
E56,*** register callback for <*>
E57,*** unregister callback for <*>
E58,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>
E59,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>
E60,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>, y[<*>]=<*>, toolType[<*>]=<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>"
E61,playSoundEffect effectType: <*>
E62,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>"
E63,START u0 {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
E64,"ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>"
E65,onNotificationClick called
E66,"cancelNotification,index:<*>"
E67,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>"
E68,"cancelNotificationLocked called, tell the app, reason = <*>"
E69,cancelNotificationLocked:<*>|com.tencent.mobileqq|<*>|null|<*>
E70,"cancelNotificationLocked,remove = <*>"
E71,applyOptionsLocked: Unknown animationType=<*>
E72,"Taking screenshot from Surface with crop:<*>, width:<*>, height:<*>, minLayer:<*>, maxLayer:<*>, inRotation:<*>, rot:<*>"
E73,removeNotification:<*>|com.tencent.mobileqq|<*>|null|<*>
E74,"updateNotificationShade: total=<*>, active=<*>"
E75,The change in focus caused us to need to do a <*> begin
E76,The change in focus caused us to need to do a <*> end
E77,setLightsOn(true)
E78,removeNotificationChildren
E79,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> bnds=<*> }"
E80,"Skipping, withExcluded: <*>, tr.intent:<*>"
E81,"getRecentTasks: num=<*>, flags=<*>, totalTasks=<*>"
E82,getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.<*>}
E83,"cancelNotificationWithTag pid <*>, uid = <*>, tag = <*>, pkg = <*>, id = <*>"
E84,makeExpandedInvisible: mExpandedVisible=<*>
E85,closeQs
E86,instantCollapse
E87,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output
E88,isMusicActive...
E89,"Start dump, calling from : pid=<*>, uid=<*>"
E90,setWiredDeviceConnectionState type: <*> state: <*>
E91,"ActivityManagerService,attachApplication,callingPid = <*>"
E92,isBluetoothA2dpOn...
E93,isBluetoothScoOn...
E94,getLastAudibleStreamVolume treamType: <*>
E95,getDevicesForStream streamType: <*>
E96,cleanUpApplicationRecord -- <*>
E97,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>"
E98,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>"
E99,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>
E100,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>
E101,getMode...
E102,setSpeakerphoneOn on: <*>
E103,"sending alarm Alarm{aa90550 type <*> when <*> PendingIntent{<*>: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = <*>,listenerTag =time_tick"
E104,Received <*> alarm; rescheduling
E105,scheduleTimeTickEvent triggerAtTime = <*>
E106,received broadcast <*>
E107,handleTimeUpdate
E108,"sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>"
E109,Killing <*> (adj <*>): empty for <*>
E110,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found
E111,unregisterAudioFocusListener...
E112,abandonAudioFocus
E113,"[HSM] stayAwake <*> uid: <*>, pid: <*>"
E114,Pid:<*> MediaPlayer destructor
E115,Process <*> (pid <*>) has died
E116,Scheduling restart of crashed service <*> in <*>
E117,"new Process app=ProcessRecord{6eaaf00 <*>}, name: <*>, euid: <*>"
E118,Start proc <*> for service <*>
E119,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=<*> sound=<*> tick defaults=<*> flags=<*> color=<*> vis=<*>)
E120,enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>
E121,getRingerMode...
E122,addNotification key=<*>|<*>|<*>|<*>|<*>
E123,mHeadsUpExistenceChangedRunnable
E124,Marking notification as seen <*>|<*>|<*>|<*>|<*>
E125,onNotificationExpansionChanged called
E126,START u0 {act=<*> cat=<*> flg=<*> cmp=<*> bnds=<*>} from uid <*> on display <*>
E127,getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/<*>}
E128,"ACTIVITY check resid: <*>, size=<*>"
E129,isWiredHeadsetOn...
E130,"setDataSource(<*>, <*>, <*>)"
E131,getStreamVolume treamType: <*>
E132,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>"
E133,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>
E134,updateChargingLocked: charging=<*>
E135,"onReceive, action:<*>"
E136,ACTION_BATTERY_CHANGED pluggedType: <*>
E137,ApStaDisabledState what=<*>
E138,DefaultState what=<*>
E139,battery changed pluggedType: <*>
E140,RefreshBatteryInfo isBatteryLow: <*>
E141,ChargingSpeed Wattage: <*> ST: <*> --> <*>
E142,handleBatteryUpdate
E143,START u0 <*> cmp=<*> (has extras) from uid <*> on display <*>
E144,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=<*> cmp=<*> (has extras) }
E145,getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/<*>}
