EventId,EventTemplate
E1,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> u0 <*>}}}, allDrawn= <*>, startingDisplayed = <*>, startingMoved = <*>, isRelaunching = <*>"
E2,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>"
E3,"ready=true,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*>"
E4,Skipping AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> u0 <*>}}} -- going to hide
E5,visible is <*>
E6,mVisiblity.getValue is <*>
E7,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>"", ws=<*>, uid=<*>, pid=<*>"
E8,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>"
E9,updateDimmedActivatedHideSensitive overlap:<*>
E10,getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output
E11,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>), dockedStackBounds=Rect(<*>)"
E12,cancelAutohide
E13,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>"
E14,Destroying surface Surface(name=SurfaceView - com.tencent.qt.qtl/com.tencent.video.player.activity.PlayerActivity) called by com.android.server.wm.WindowStateAnimator.destroyDeferredSurfaceLocked:<*> com.android.server.wm.WindowManagerService.performDeferredDestroyWindow:<*> com.android.server.wm.Session.performDeferredDestroy:<*> android.view.IWindowSession$Stub.onTransact:<*> com.android.server.wm.Session.onTransact:<*> android.os.Binder.execTransact:<*> <bottom of call stack> <bottom of call stack>
E15,Destroying surface Surface(name=<*>) called by <*> com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> com.android.server.wm.WindowState.destroyOrSaveSurface:<*> com.android.server.wm.WindowManagerService.tryStartExitingAnimation:<*> com.android.server.wm.WindowManagerService.relayoutWindow:<*> com.android.server.wm.Session.relayout:<*> android.view.IWindowSession$Stub.onTransact:<*> com.android.server.wm.Session.onTransact:<*>
E16,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>"
E17,"orientation change is complete, call <*>"
E18,Screen frozen for +<*> due to Window{<*> u0 <*>}
E19,startAnimation begin
E20,startAnimation end
E21,remove(PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}) changed bounds; rebatching
E22,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED"
E23,"Application requested orientation <*>, got rotation <*> which has compatible metrics"
E24,shouldBlockLocation running ...
E25,shouldBlockLocation ret:<*>
E26,getNeighboringCellInfo calling app is <*>
E27,"Releasing suspend blocker ""<*>""."
E28,HBM brightnessIn =<*>
E29,HBM brightnessOut =<*>
E30,"Animating brightness: target=<*>, rate=<*>"
E31,suspendAutohide
E32,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>
E33,"interceptKeyBeforeQueueing: key <*> , result : <*>"
E34,resumeSuspendedAutohide
E35,querySoundEffectsEnabled...
E36,"Acquiring suspend blocker ""<*>""."
E37,Bad activity token: android.os.BinderProxy@<*>
E38,java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token
E39,"onTouchEvent::<*>, x=<*>, y=<*>"
E40,schedulePeek
E41,getRingtonePlayer...
E42,disable: < expand {ICONS*} alerts {SYSTEM_INFO*} back home recent clock navigationbar search quick_settings >
E43,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>"
E44,"updateLightsLocked,turn off notificationLight"
E45,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>"
E46,"state.clipTopAmount:<*>, i:<*>"
E47,onExpandingStarted
E48,onTrackingStarted
E49,Destroying surface Surface(name=<*>) called by <*>
E50,cancelPeek: <*>
E51,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>"
E52,onTrackingStopped: <*>
E53,onExpandingFinished
E54,Sending non-protected broadcast <*> from system <*> pkg <*>
E55,logNotificationVisibilityChanges runInThread start
E56,onNotificationVisibilityChanged called
E57,logNotificationVisibilityChanges runInThread over
E58,isSimPinSecure mSimDatas is <*> or <*>
E59,registerCallback not in UI.
E60,android.util.AndroidRuntimeException: Must execute in UI
E61,*** register callback for <*>
E62,*** unregister callback for <*>
E63,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>
E64,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>
E65,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>, y[<*>]=<*>, toolType[<*>]=<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>"
E66,playSoundEffect effectType: <*>
E67,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>"
E68,START u0 {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
E69,"ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>"
E70,onNotificationClick called
E71,"cancelNotification,index:<*>"
E72,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>"
E73,"cancelNotificationLocked called,tell the app,reason = <*>"
E74,cancelNotificationLocked:<*>|com.tencent.mobileqq|<*>|null|<*>
E75,"cancelNotificationLocked,remove =<*>"
E76,applyOptionsLocked: Unknown animationType=<*>
E77,"Taking screenshot from Surface with crop:[Rect(<*> - <*>)], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]"
E78,removeNotification:<*>|com.tencent.mobileqq|<*>|null|<*>
E79,"updateNotificationShade: total=<*>, active=<*>"
E80,The change in focus caused us to need to do a layout begin
E81,The change in focus caused us to need to do a layout end
E82,setLightsOn(true)
E83,removeNotificationChildren
E84,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> bnds=<*> }"
E85,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> flg=<*> cmp=<*> (has extras) }"
E86,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> (has extras) }"
E87,"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>"
E88,getRecentTasks: topActivity=ComponentInfo{com.tencent.mobileqq/com.tencent.mobileqq.activity.SplashActivity}
E89,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>"
E90,makeExpandedInvisible: mExpandedVisible=<*>
E91,closeQs
E92,instantCollapse
E93,disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >
E94,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output
E95,isMusicActive...
E96,"Start dump, calling from : pid=<*>, uid=<*>"
E97,setWiredDeviceConnectionState type: <*> state: <*>
E98,"ActivityManagerService,attachApplication,callingPid = <*>"
E99,isBluetoothA2dpOn...
E100,isBluetoothScoOn...
E101,getLastAudibleStreamVolume treamType: <*>
E102,getDevicesForStream streamType: <*>
E103,cleanUpApplicationRecord -- <*>
E104,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>"
E105,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>"
E106,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>
E107,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>
E108,getMode...
E109,setSpeakerphoneOn on: <*>
E110,"sending alarm Alarm{aa90550 type <*> when <*> PendingIntent{<*>: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>"
E111,Received TIME_TICK alarm; rescheduling
E112,scheduleTimeTickEvent triggerAtTime = <*>
E113,received broadcast <*>
E114,handleTimeUpdate
E115,"sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>"
E116,Killing <*> (adj <*>): empty for <*>
E117,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found
E118,unregisterAudioFocusListener...
E119,abandonAudioFocus
E120,"[HSM] stayAwake false uid: <*>, pid: <*>"
E121,Pid:<*> MediaPlayer destructor
E122,Process <*>:qzone (pid <*>) has died
E123,Scheduling restart of crashed service <*> in <*>
E124,"new Process app=ProcessRecord{<*> <*>}, name: <*>, euid: <*>"
E125,Start proc <*> for service <*>
E126,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=[<*>] sound=<*> tick defaults=<*> flags=<*> color=<*> vis=PRIVATE)
E127,enqueueNotificationInternal: n.getKey = <*>
E128,getRingerMode...
E129,addNotification key=<*>|<*>|<*>|<*>|<*>
E130,mHeadsUpExistenceChangedRunnable
E131,Marking notification as seen <*>|<*>|<*>|<*>|<*>
E132,onNotificationExpansionChanged called
E133,"START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=<*> cmp=com.example.android.notepad/.NotePadActivity bnds=[<*>,<*>][<*>,<*>]} from uid <*> on display <*>"
E134,getRecentTasks: topActivity=ComponentInfo{com.example.android.notepad/com.example.android.notepad.NoteEditor}
E135,"ACTIVITY check resid: <*>, size=<*>"
E136,"START u0 {act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=<*> cmp=com.tencent.mobileqq/.activity.SplashActivity bnds=[<*>,<*>][<*>,<*>]} from uid <*> on display <*>"
E137,getAllCellInfo is blocked by permission manager . callingPackage = <*>
E138,getCellLocation is blocked by permission manager uid:<*> pid:<*>
E139,isWiredHeadsetOn...
E140,"setDataSource(<*>, <*>, <*>)"
E141,getStreamVolume treamType: <*>
E142,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>"
E143,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>
E144,updateChargingLocked: charging=<*>
E145,"onReceive, action:<*>"
E146,ACTION_BATTERY_CHANGED pluggedType: <*>
E147,ApStaDisabledState what=<*>
E148,DefaultState what=<*>
E149,battery changed pluggedType: <*>
E150,RefreshBatteryInfo isBatteryLow: <*>
E151,ChargingSpeed Wattage: <*> ST: <*> --> <*>
E152,handleBatteryUpdate
E153,START u0 <*> cmp=<*> (has extras)} from uid <*> on display <*>
E154,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=<*> cmp=<*> (has extras) }
E155,getRecentTasks: topActivity=ComponentInfo{com.tencent.mm/com.tencent.mm.ui.LauncherUI}
