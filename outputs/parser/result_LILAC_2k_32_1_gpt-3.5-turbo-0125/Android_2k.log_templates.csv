EventId,EventTemplate
E1,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> u0 <*>}}}, allDrawn= <*>, startingDisplayed = <*>, startingMoved = <*>, isRelaunching = <*>"
E2,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>"
E3,"ready=true,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*>"
E4,Skipping AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> u0 <*>}}} -- going to hide
E5,visible is <*>
E6,mVisiblity.getValue is <*>
E7,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>"", ws=<*>, uid=<*>, pid=<*>"
E8,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>"
E9,updateDimmedActivatedHideSensitive overlap:<*>
E10,getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output
E11,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=<*>, dockedStackBounds=<*>"
E12,cancelAutohide
E13,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>"
E14,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*> <*>
E15,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>"
E16,"orientation change is <*>, call <*>"
E17,Screen frozen for +<*> due to Window{<*> u0 <*>}
E18,startAnimation begin
E19,startAnimation end
E20,remove(PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}) changed bounds; rebatching
E21,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED"
E22,"Application requested orientation <*>, got rotation <*> which has compatible metrics"
E23,shouldBlockLocation running ...
E24,shouldBlockLocation ret:<*>
E25,getNeighboringCellInfo calling app is <*>
E26,"Releasing suspend blocker ""<*>""."
E27,HBM brightnessIn =<*>
E28,HBM brightnessOut =<*>
E29,"Animating brightness: target=<*>, rate=<*>"
E30,suspendAutohide
E31,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>
E32,"interceptKeyBeforeQueueing: key <*> , result : <*>"
E33,resumeSuspendedAutohide
E34,querySoundEffectsEnabled...
E35,"Acquiring suspend blocker ""<*>""."
E36,Bad activity token: <*>
E37,java.lang.ClassCastException: android.os.BinderProxy cannot be cast to com.android.server.am.ActivityRecord$Token
E38,"onTouchEvent::<*>, x=<*>, y=<*>"
E39,schedulePeek
E40,getRingtonePlayer...
E41,disable: < expand <*> alerts <*> back home recent clock navigationbar search quick_settings >
E42,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>"
E43,"updateLightsLocked,turn off notificationLight"
E44,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>"
E45,"state.clipTopAmount:<*>, i:<*>"
E46,onExpandingStarted
E47,onTrackingStarted
E48,cancelPeek: <*>
E49,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>"
E50,onTrackingStopped: <*>
E51,onExpandingFinished
E52,Sending non-protected broadcast <*> from system <*> pkg <*>
E53,logNotificationVisibilityChanges runInThread start
E54,onNotificationVisibilityChanged called
E55,logNotificationVisibilityChanges <*> over
E56,isSimPinSecure mSimDatas is <*> or empty
E57,registerCallback not in UI.
E58,android.util.AndroidRuntimeException: Must execute in UI
E59,*** register callback for <*>
E60,*** unregister callback for <*>
E61,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>
E62,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>
E63,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>, y[<*>]=<*>, toolType[<*>]=<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>"
E64,playSoundEffect effectType: <*>
E65,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>"
E66,START u0 {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
E67,"ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>"
E68,onNotificationClick called
E69,"cancelNotification,index:<*>"
E70,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>"
E71,"cancelNotificationLocked called,tell the app,reason = <*>"
E72,cancelNotificationLocked:<*>|com.tencent.mobileqq|<*>|null|<*>
E73,"cancelNotificationLocked,remove =<*>"
E74,applyOptionsLocked: Unknown animationType=<*>
E75,"Taking screenshot from Surface with crop:[<*>], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]"
E76,removeNotification:<*>|com.tencent.mobileqq|<*>|null|<*>
E77,"updateNotificationShade: total=<*>, active=<*>"
E78,The change in focus caused us to need to do a layout begin
E79,The change in focus caused us to need to do a layout end
E80,setLightsOn(true)
E81,removeNotificationChildren
E82,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> bnds=[<*>]}"
E83,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> flg=<*> cmp=<*> (has extras) }"
E84,"Skipping, withExcluded: false, tr.intent:Intent { flg=<*> cmp=com.tencent.mm/.plugin.base.stub.WXEntryActivity (has extras) }"
E85,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> (has extras) }"
E86,"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>"
E87,getRecentTasks: topActivity=ComponentInfo{<*>}
E88,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>"
E89,makeExpandedInvisible: mExpandedVisible=<*>
E90,closeQs
E91,instantCollapse
E92,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output
E93,isMusicActive...
E94,"Start dump, calling from : pid=<*>, uid=<*>"
E95,setWiredDeviceConnectionState type: <*> state: <*>
E96,"ActivityManagerService,attachApplication,callingPid = <*>"
E97,isBluetoothA2dpOn...
E98,isBluetoothScoOn...
E99,getLastAudibleStreamVolume treamType: <*>
E100,getDevicesForStream streamType: <*>
E101,cleanUpApplicationRecord -- <*>
E102,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>"
E103,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>"
E104,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>
E105,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>
E106,getMode...
E107,setSpeakerphoneOn on: <*>
E108,"sending alarm Alarm{aa90550 type <*> when <*> PendingIntent{<*>: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>"
E109,Received <*> alarm; rescheduling
E110,scheduleTimeTickEvent triggerAtTime = <*>
E111,received broadcast <*>
E112,handleTimeUpdate
E113,"sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}},repeatInterval = <*>,listenerTag =<*>"
E114,Killing <*> (adj <*>): empty for <*>
E115,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found
E116,unregisterAudioFocusListener...
E117,abandonAudioFocus
E118,"[HSM] stayAwake <*> uid: <*>, pid: <*>"
E119,Pid:<*> MediaPlayer destructor
E120,Process <*>:qzone (pid <*>) has died
E121,Scheduling restart of crashed service <*> in <*>
E122,"new Process app=ProcessRecord{<*> <*>}, name: <*>, euid: <*>"
E123,Start proc <*> for service <*>
E124,enqueueNotificationInternal: pkg=com.tencent.mobileqq id=<*> notification=Notification(pri=<*> contentView=null vibrate=[<*>] sound=null tick defaults=<*> flags=<*> color=<*> vis=PRIVATE)
E125,enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>
E126,getRingerMode...
E127,addNotification key=<*>|<*>|<*>|<*>|<*>
E128,mHeadsUpExistenceChangedRunnable
E129,Marking notification as seen <*>|<*>|<*>|<*>|<*>
E130,onNotificationExpansionChanged called
E131,START u0 {act=<*> cat=<*> flg=<*> cmp=<*> bnds=<*>} from uid <*> on display <*>
E132,"ACTIVITY check resid: <*>, size=<*>"
E133,getAllCellInfo is blocked by permission manager . callingPackage = <*>
E134,getCellLocation is blocked by permission manager uid:<*> pid:<*>
E135,isWiredHeadsetOn...
E136,"setDataSource(<*>, <*>, <*>)"
E137,getStreamVolume treamType: <*>
E138,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>"
E139,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>
E140,updateChargingLocked: charging=<*>
E141,"onReceive, action:<*>"
E142,ACTION_BATTERY_CHANGED pluggedType: <*>
E143,ApStaDisabledState what=<*>
E144,DefaultState what=<*>
E145,battery changed pluggedType: <*>
E146,RefreshBatteryInfo isBatteryLow: <*>
E147,ChargingSpeed Wattage: <*> ST: <*> --> <*>
E148,handleBatteryUpdate
E149,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=[] sound=<*> tick defaults=<*> flags=<*> color=<*> category=<*> vis=PRIVATE)
E150,START u0 {flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
E151,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=<*> cmp=<*> (has extras) }
