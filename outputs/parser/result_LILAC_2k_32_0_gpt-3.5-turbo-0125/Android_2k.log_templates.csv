EventId,EventTemplate
E1,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 <*> t761}}}, allDrawn= false, startingDisplayed = false, startingMoved = false, isRelaunching = false"
E2,"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>"
E3,"ready=true,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=true,boostinprogress=false,waitmodeenable=false,mode=false,manual=<*>,auto=<*>,adj=<*>.0userId=<*>"
E4,Skipping AppWindowToken{df0798e token=Token{78af589 ActivityRecord{3b04890 u0 com.tencent.qt.qtl/com.tencent.video.player.activity.PlayerActivity t761}}} -- going to hide
E5,visible is <*>
E6,<*> is <*>
E7,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>"", ws=<*>, uid=<*>, pid=<*>"
E8,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>"
E9,updateDimmedActivatedHideSensitive overlap:<*>
E10,getRunningAppProcesses: caller <*> does not hold <*>; limiting output
E11,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)"
E12,cancelAutohide
E13,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>"
E14,Destroying surface Surface(name=<*>) called by <*>: <*> <*>: <*> <*>: <*> <*>: <*> <bottom of call stack> <bottom of call stack>
E15,Destroying surface Surface(name=<*>) called by <*> <*> <*> <*> <*> <*> <*>
E16,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>"
E17,Screen frozen for +<*> due to <*>
E18,startAnimation <*>
E19,remove(<*>) changed bounds; rebatching
E20,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED"
E21,"Application requested orientation <*>, got rotation <*> which has compatible metrics"
E22,shouldBlockLocation running ...
E23,shouldBlockLocation ret:<*>
E24,"Releasing suspend blocker ""<*>""."
E25,HBM brightnessIn = <*>
E26,HBM brightnessOut = <*>
E27,"Animating brightness: target=<*>, rate=<*>"
E28,suspendAutohide
E29,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>
E30,"interceptKeyBeforeQueueing: key <*> , result : <*>"
E31,resumeSuspendedAutohide
E32,querySoundEffectsEnabled...
E33,"Acquiring suspend blocker ""<*>""."
E34,Skipping AppWindowToken{9f4ef63 token=Token{a64f992 ActivityRecord{de9231d u0 <*> t761}}} -- going to hide
E35,Bad activity token: <*>
E36,java.lang.ClassCastException: <*> cannot be cast to <*>
E37,"onTouchEvent::<*>, x=<*>, y=<*>"
E38,schedulePeek
E39,getRingtonePlayer...
E40,disable: < expand <*> alerts <*> back home recent clock navigationbar search quick_settings >
E41,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == <*>"
E42,"<*>,turn off <*>"
E43,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:-<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():-<*>"
E44,"state.clipTopAmount:<*>, i:<*>"
E45,onExpandingStarted
E46,onTrackingStarted
E47,cancelPeek: <*>
E48,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>"
E49,onTrackingStopped: <*>
E50,onExpandingFinished
E51,Sending non-protected broadcast <*> from system <*>
E52,logNotificationVisibilityChanges <*> start
E53,onNotificationVisibilityChanged called
E54,logNotificationVisibilityChanges <*> over
E55,registerCallback not in <*>.
E56,android.util.AndroidRuntimeException: Must execute in UI
E57,*** register callback for <*>
E58,*** unregister callback for <*>
E59,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>
E60,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>
E61,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>]=<*>, x[<*>]=<*>, y[<*>]=<*>, toolType[<*>]=<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=<*>"
E62,playSoundEffect effectType: <*>
E63,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>"
E64,START u0 {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>
E65,"ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>"
E66,onNotificationClick called
E67,"cancelNotification,index:<*>"
E68,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>"
E69,"cancelNotificationLocked called, tell the app, reason = <*>"
E70,cancelNotificationLocked:<*>|com.tencent.mobileqq|<*>|null|<*>
E71,"cancelNotificationLocked,remove =<*>"
E72,applyOptionsLocked: Unknown animationType=<*>
E73,"Taking screenshot from Surface with crop:<*>, width:<*>, height:<*>, minLayer:<*>, maxLayer:<*>, inRotation:<*>, rot:<*>"
E74,removeNotification:<*>|com.tencent.mobileqq|<*>|null|<*>
E75,"updateNotificationShade: total=<*>, active=<*>"
E76,The change in focus caused us to need to do a <*> begin
E77,The change in focus caused us to need to do a <*> end
E78,setLightsOn(true)
E79,removeNotificationChildren
E80,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> bnds=[<*>,<*>][<*>,<*>] }"
E81,"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> flg=<*> cmp=<*> (has extras) }"
E82,"Skipping, withExcluded: <*>, tr.intent:Intent { flg=<*> cmp=<*> (has extras) }"
E83,"getRecentTasks: num=<*>, flags=<*>, totalTasks=<*>"
E84,getRecentTasks: topActivity=ComponentInfo{<*>}
E85,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>"
E86,makeExpandedInvisible: mExpandedVisible=<*>
E87,closeQs
E88,instantCollapse
E89,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output
E90,isMusicActive...
E91,"Start dump, calling from : pid=<*>, uid=<*>"
E92,setWiredDeviceConnectionState type: <*> state: <*>
E93,"ActivityManagerService,attachApplication,callingPid = <*>"
E94,isBluetoothA2dpOn...
E95,isBluetoothScoOn...
E96,getLastAudibleStreamVolume treamType: <*>
E97,getDevicesForStream streamType: <*>
E98,cleanUpApplicationRecord -- <*>
E99,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>"
E100,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>"
E101,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>
E102,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>
E103,getMode...
E104,setSpeakerphoneOn on: <*>
E105,"sending alarm Alarm{aa90550 type <*> when <*> PendingIntent{<*>: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = <*>,listenerTag =time_tick"
E106,Received <*> alarm; rescheduling
E107,scheduleTimeTickEvent triggerAtTime = <*>
E108,received broadcast <*>
E109,handleTimeUpdate
E110,"sending alarm Alarm{19069ff type <*> when <*> PendingIntent{50303cc: PendingIntentRecord{e204f60 com.android.phone broadcastIntent}}},repeatInterval = <*>,listenerTag =null"
E111,Killing <*> (<*> <*>): empty for <*>
E112,"sending alarm Alarm{c1705d3 type <*> when <*> PendingIntent{<*>: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = <*>,listenerTag =time_tick"
E113,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found
E114,unregisterAudioFocusListener...
E115,abandonAudioFocus
E116,"[HSM] stayAwake <*> uid: <*>, pid: <*>"
E117,Pid:<*> MediaPlayer destructor
E118,Process <*> (pid <*>) has died
E119,Scheduling restart of crashed service <*> in <*>
E120,"new Process app=ProcessRecord{6eaaf00 <*>:qzone/u0<*>}, name: <*>:qzone, euid: <*>"
E121,Start proc <*> for service <*>
E122,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=<*> sound=<*> tick defaults=<*> flags=<*> color=<*> vis=<*>)
E123,enqueueNotificationInternal: n.getKey = <*>|<*>|<*>|<*>|<*>
E124,getRingerMode...
E125,addNotification key=<*>|<*>|<*>|<*>|<*>
E126,mHeadsUpExistenceChangedRunnable
E127,Marking notification as seen <*>|<*>|<*>|<*>|<*>
E128,onNotificationExpansionChanged called
E129,START u0 <*> from uid <*> on display <*>
E130,"ACTIVITY check resid: <*>, size=<*>"
E131,"sending alarm Alarm{d764221 type <*> when <*> PendingIntent{<*>: PendingIntentRecord{9600e20 android broadcastIntent}}},repeatInterval = <*>,listenerTag =time_tick"
E132,isWiredHeadsetOn...
E133,"setDataSource(<*>, <*>, <*>)"
E134,getStreamVolume treamType: <*>
E135,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>"
E136,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>
E137,updateChargingLocked: charging=<*>
E138,"onReceive, action:<*>"
E139,ACTION_BATTERY_CHANGED pluggedType: <*>
E140,ApStaDisabledState what=<*>
E141,DefaultState what=<*>
E142,battery changed pluggedType: <*>
E143,RefreshBatteryInfo isBatteryLow: <*>
E144,ChargingSpeed Wattage: <*> ST: <*> --> <*>
E145,handleBatteryUpdate
E146,"sending alarm Alarm{<*> type <*> when <*> PendingIntent{f75f81e: PendingIntentRecord{e204f60 com.android.phone broadcastIntent}}},repeatInterval = <*>,listenerTag =null"
E147,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=<*> cmp=<*> (has extras) }
